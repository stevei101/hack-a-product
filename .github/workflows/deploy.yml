name: Deploy The Product Mindset

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: product-mindset

jobs:
  # Infrastructure deployment with Terraform Cloud
  infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-${{ github.run_id }}
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        
    - name: Terraform Format Check
      run: terraform fmt -check
      working-directory: ./terraform
      
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform
      env:
        TF_VAR_aws_region: ${{ env.AWS_REGION }}
        TF_VAR_github_org: ${{ github.repository_owner }}
        TF_VAR_github_repo: ${{ github.event.repository.name }}
        TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
        TF_VAR_bucket_name: ${{ env.PROJECT_NAME }}-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}-static
      
    - name: Terraform Validate
      run: terraform validate
      working-directory: ./terraform
      env:
        TF_VAR_aws_region: ${{ env.AWS_REGION }}
        TF_VAR_github_org: ${{ github.repository_owner }}
        TF_VAR_github_repo: ${{ github.event.repository.name }}
        TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
        TF_VAR_bucket_name: ${{ env.PROJECT_NAME }}-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}-static
      
    - name: Terraform Plan
      run: terraform plan -input=false
      working-directory: ./terraform
      env:
        TF_VAR_aws_region: ${{ env.AWS_REGION }}
        TF_VAR_github_org: ${{ github.repository_owner }}
        TF_VAR_github_repo: ${{ github.event.repository.name }}
        TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
        TF_VAR_bucket_name: ${{ env.PROJECT_NAME }}-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}-static
      
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
      working-directory: ./terraform
      env:
        TF_VAR_aws_region: ${{ env.AWS_REGION }}
        TF_VAR_github_org: ${{ github.repository_owner }}
        TF_VAR_github_repo: ${{ github.event.repository.name }}
        TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
        TF_VAR_bucket_name: ${{ env.PROJECT_NAME }}-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}-static

  # Build and test the application
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install frontend dependencies
      run: bun install
      
    - name: Build frontend
      run: bun run build
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Setup backend environment
      run: |
        cd backend
        python -m venv .venv
        source .venv/bin/activate
        pip install uv
        uv pip install fastapi uvicorn sqlalchemy asyncpg httpx pydantic pydantic-settings numpy pytest
        
    - name: Run backend tests
      run: |
        cd backend
        source .venv/bin/activate
        python -m pytest -v
      env:
        NIM_API_KEY: ${{ secrets.NIM_API_KEY }}

  # Deploy to AWS EKS
  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: [infrastructure, build-and-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    permissions:
      id-token: write
      contents: read
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Debug GitHub context
      run: |
        echo "Repository: ${{ github.repository }}"
        echo "Ref: ${{ github.ref }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Event: ${{ github.event_name }}"
        echo "AWS_ROLE_ARN secret exists: ${{ secrets.AWS_ROLE_ARN != '' }}"
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-${{ github.run_id }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build and push frontend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: smithveunsa/react-bun-k8s-frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
    - name: Build and push backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: smithveunsa/react-bun-k8s-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl for EKS
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.PROJECT_NAME }}-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
        
    - name: Deploy with Helm
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY_FRONTEND: smithveunsa/react-bun-k8s-frontend
        ECR_REPOSITORY_BACKEND: smithveunsa/react-bun-k8s-backend
        IMAGE_TAG: ${{ github.sha }}
        ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
      run: |
        # Update Helm values with ECR image references
        sed -i "s|repository: .*|repository: $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND|g" charts/frontend/values.yaml
        sed -i "s|tag: .*|tag: $IMAGE_TAG|g" charts/frontend/values.yaml
        
        sed -i "s|repository: .*|repository: $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND|g" charts/backend/values.yaml
        sed -i "s|tag: .*|tag: $IMAGE_TAG|g" charts/backend/values.yaml
        
        # Deploy frontend
        helm upgrade --install frontend ./charts/frontend \
          --namespace $ENVIRONMENT \
          --create-namespace \
          --set image.repository=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND \
          --set image.tag=$IMAGE_TAG
          
        # Deploy backend
        helm upgrade --install backend ./charts/backend \
          --namespace $ENVIRONMENT \
          --create-namespace \
          --set image.repository=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND \
          --set image.tag=$IMAGE_TAG \
          --set env.NIM_API_KEY=${{ secrets.NIM_API_KEY }} \
          --set env.POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}

  # Deploy static website to S3/CloudFront
  deploy-static:
    name: Deploy Static Website
    runs-on: ubuntu-latest
    needs: [infrastructure, build-and-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    permissions:
      id-token: write
      contents: read
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-${{ github.run_id }}
        
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: bun install
      
    - name: Build frontend
      run: bun run build
      
    - name: Deploy to S3
      run: |
        aws s3 sync dist/ s3://${{ env.PROJECT_NAME }}-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}-static --delete
        
    - name: Invalidate CloudFront
      run: |
        DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Origins.Items[0].DomainName=='${{ env.PROJECT_NAME }}-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}-static.s3.amazonaws.com'].Id" --output text)
        aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"