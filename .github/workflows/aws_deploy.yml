# .github/workflows/aws_deploy.yml

name: Deploy Frontend to AWS with Terraform Cloud

on:
  push:
    branches:
      - develop

jobs:
  terraform-provision:
    name: 'Terraform Provision via Terraform Cloud'
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write # Required for AWS OIDC

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform -chdir=./terraform init

      - name: Terraform Plan
        id: plan
        run: |
          terraform -chdir=./terraform plan \
            -var="bucket_name=${{ secrets.AWS_BUCKET_NAME }}" \
            -var="github_organization=${{ github.repository_owner }}" \
            -var="github_repository=${{ github.event.repository.name }}"

      - name: Terraform Apply
        run: |
          terraform -chdir=./terraform apply -auto-approve \
            -var="bucket_name=${{ secrets.AWS_BUCKET_NAME }}" \
            -var="github_organization=${{ github.repository_owner }}" \
            -var="github_repository=${{ github.event.repository.name }}"

      - name: Get Outputs
        id: outputs
        run: |
          echo "s3_bucket_name=$(terraform -chdir=./terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution_id=$(terraform -chdir=./terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT

  deploy-frontend:
    name: 'Build and Deploy Frontend'
    runs-on: ubuntu-latest
    needs: terraform-provision

    permissions:
      contents: read
      id-token: write # Required for AWS OIDC

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install Dependencies
        run: bun install

      - name: Build Application
        run: bun run build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubAction-AssumeRoleWithAction
          aws-region: us-east-1

      - name: Deploy to S3
        run: |
          aws s3 sync ./dist s3://${{ needs.terraform-provision.outputs.s3_bucket_name }} --delete

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.terraform-provision.outputs.cloudfront_distribution_id }} \
            --paths "/*"