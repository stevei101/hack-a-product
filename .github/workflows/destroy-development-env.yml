# .github/workflows/destroy-testing-env.yml

name: 'Destroy Develop Environment'

on:
  workflow_dispatch:

jobs:
  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    environment: develop

    permissions:
      id-token: write
      contents: read

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest
        terraform_wrapper: false
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Configure AWS credentials from the OIDC provider
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubAction-AssumeRoleWithAction
        aws-region: ${{ secrets.AWS_REGION }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, and downloading modules
    - name: Terraform Init
      run: terraform init

    # Generate a plan to destroy all remote objects
    - name: Terraform Plan (Destroy)
      id: plan
      run: |
        terraform plan -destroy -no-color -input=false -out=destroy.tfplan | tee plan_output.txt
      continue-on-error: false

    # Show what will be destroyed
    - name: Show Resources to be Destroyed
      run: |
        echo "📋 RESOURCES THAT WILL BE DESTROYED:"
        echo "===================================="
        echo ""
        terraform show -no-color destroy.tfplan | grep -E "^  # |will be destroyed" || true
        echo ""
        echo "📊 Summary:"
        grep -E "Plan:|will be destroyed" plan_output.txt || true

    # Create a detailed summary for GitHub Actions
    - name: Create Destroy Summary
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        ## 🧹 Terraform Destroy Plan Summary
        
        ### Resources to be Destroyed:
        
        | Resource Type | Count |
        |--------------|-------|
        | S3 Buckets | 1 |
        | CloudFront Distributions | 1 |
        | ECR Repositories | 2 |
        | EKS Cluster | 1 |
        | VPC & Networking | Multiple |
        | IAM Roles & Policies | Multiple |
        
        ### ⚠️ This action will:
        - ✅ Delete the S3 static website bucket
        - ✅ Delete the CloudFront distribution
        - ✅ Delete frontend and backend ECR repositories
        - ✅ Delete the EKS cluster and all workloads
        - ✅ Delete the VPC, subnets, and networking components
        - ✅ Delete IAM roles and policies
        
        ### 💰 Cost Impact:
        - Monthly savings: ~$100-150/month (EKS cluster)
        - All AWS resources will be removed
        
        ### 🔄 To Re-provision:
        - Push to `develop` branch
        - Or run Terraform apply in Terraform Cloud
        
        ---
        
        **Triggered by:** @${{ github.actor }}
        **Time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        EOF

    # Show the destroy plan in the PR for review
    - name: 'Comment on PR with Plan'
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const output = `#### Terraform Destroy Plan 📖\`\`\`
          ${{ steps.plan.outputs.stdout }}
          \`\`\`
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*
          `;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    # On workflow_dispatch, automatically destroy the remote objects
    - name: Terraform Destroy
      if: github.ref == 'refs/heads/develop' && github.event_name == 'workflow_dispatch'
      run: |
        echo "💥 Destroying infrastructure in 5 seconds..."
        sleep 5
        terraform destroy -auto-approve -input=false
        
    # Confirm destruction
    - name: Destruction Complete
      if: github.ref == 'refs/heads/develop' && github.event_name == 'workflow_dispatch'
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        
        ## ✅ Infrastructure Destroyed Successfully!
        
        All AWS resources have been removed.
        
        ### Next Steps:
        1. Verify in AWS Console that resources are gone
        2. Check Terraform Cloud state is clean
        3. To re-provision: push to `develop` branch
        
        EOF
        echo "✅ All infrastructure has been destroyed!"
